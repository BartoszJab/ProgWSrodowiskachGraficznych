using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using t3d;
using punkt;

namespace DolaczenieKlas
{
    public partial class Form1 : Form
    {
        private double r = 10, fi = 45, teta = 60; //pozycja obserwatora we współrzędnych sferycznych

        public Form1()
        {
            InitializeComponent();
            listBox1.SelectedItem = "Ostroslup";
        }

        //-----------------------------------------------------------------------------
        //      Punkty p to rogi ostrosłupa o krawędzi 1 metr. Ostrosłup jest widziany z pozycji zadanej współrzędnymi sferycznymi
        //      Pointsy ep to ich odpowiedniki na ekranie

        private void Ostroslup(Graphics g, T3d projektor)
        {
            Punkt[] p = { new Punkt(0, 0, 1),           //ostrosłup
                          new Punkt(1, 0, 0),
                          new Punkt(0, 1, 0),
                          new Punkt(-1, 0, 0),
                          new Punkt(0, -1, 0) };
            Point[] ep = new Point[p.Length];

            for (int i = 0; i < p.Length; i++)          //konwersja punktów 3d na ekran
                projektor.punkt_3d(out ep[i], p[i]);

            g.DrawLine(Pens.Yellow, ep[1], ep[2]);    //podstawa ostrosłupa
            g.DrawLine(Pens.Yellow, ep[2], ep[3]);
            g.DrawLine(Pens.Yellow, ep[3], ep[4]);
            g.DrawLine(Pens.Yellow, ep[4], ep[1]);

            g.DrawLine(Pens.Yellow, ep[1], ep[0]);    //boki.
            g.DrawLine(Pens.Yellow, ep[2], ep[0]);
            g.DrawLine(Pens.Yellow, ep[3], ep[0]);
            g.DrawLine(Pens.Yellow, ep[4], ep[0]);
        }

        private void Szescian(Graphics g, T3d projektor)
        {
            Punkt[] p = { new Punkt(1, 0, 0),
                          new Punkt(0, 1, 0),
                          new Punkt(-1, 0, 0),
                          new Punkt(0, -1, 0),

                          new Punkt(1, 0, 1),
                          new Punkt(0, 1, 1),
                          new Punkt(-1, 0, 1),
                          new Punkt(0, -1, 1)
            };
            Point[] ep = new Point[p.Length];

            for (int i = 0; i < p.Length; i++)
                projektor.punkt_3d(out ep[i], p[i]);

            g.DrawLine(Pens.Yellow, ep[0], ep[1]);    //podstawa dolna szescianu
            g.DrawLine(Pens.Yellow, ep[1], ep[2]);
            g.DrawLine(Pens.Yellow, ep[2], ep[3]);
            g.DrawLine(Pens.Yellow, ep[3], ep[0]);

            g.DrawLine(Pens.Yellow, ep[4], ep[5]);    //podstawa gorna szescianu
            g.DrawLine(Pens.Yellow, ep[5], ep[6]);
            g.DrawLine(Pens.Yellow, ep[6], ep[7]);
            g.DrawLine(Pens.Yellow, ep[7], ep[4]);

            g.DrawLine(Pens.Yellow, ep[0], ep[4]);    // wysokoci szescianu
            g.DrawLine(Pens.Yellow, ep[1], ep[5]);
            g.DrawLine(Pens.Yellow, ep[2], ep[6]);
            g.DrawLine(Pens.Yellow, ep[3], ep[7]);
        }
        private void graniastoslupTrojkatny(Graphics g, T3d projektor)
        {
            Punkt[] p = { new Punkt(1, 0, 0),
                          new Punkt(0, 1, 0),
                          new Punkt(0, 0, 0),

                          new Punkt(1, 0, 1),
                          new Punkt(0, 1, 1),
                          new Punkt(0, 0, 1)
            };
            Point[] ep = new Point[p.Length];

            for (int i = 0; i < p.Length; i++)
                projektor.punkt_3d(out ep[i], p[i]);

            g.DrawLine(Pens.Yellow, ep[0], ep[1]);   // podstawa dolna graniastostlupa trojkatnego
            g.DrawLine(Pens.Yellow, ep[1], ep[2]);
            g.DrawLine(Pens.Yellow, ep[2], ep[0]);

            g.DrawLine(Pens.Yellow, ep[0], ep[3]); // wysokosci graniastoslupa
            g.DrawLine(Pens.Yellow, ep[1], ep[4]);
            g.DrawLine(Pens.Yellow, ep[2], ep[5]);

            g.DrawLine(Pens.Yellow, ep[3], ep[4]); // wysokosci graniastoslupa
            g.DrawLine(Pens.Yellow, ep[4], ep[5]);
            g.DrawLine(Pens.Yellow, ep[5], ep[3]);
        }

        private void mojPanel1_Paint(object sender, PaintEventArgs e)
        {
            Punkt obserwator = Punkt.RFiTetaToXYZ(r, fi, teta);    //konwersja sferycznych do kartezjanskich
            T3d projektor = new T3d(obserwator, mojPanel1.ClientRectangle);
            Graphics g = e.Graphics;
            switch (listBox1.SelectedItem.ToString())
            {
                case "Ostroslup":
                    Ostroslup(g, projektor);
                    break;
                case "Szescian":
                    Szescian(g, projektor);
                    break;
                case "Graniastoslup trojkatny":
                    graniastoslupTrojkatny(g, projektor);
                    break;
            }

        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            teta = trackBar1.Value;
            mojPanel1.Invalidate();
        }

        private void trackBar2_Scroll(object sender, EventArgs e)
        {
            r = trackBar2.Value;
            mojPanel1.Invalidate();
        }

        private void autoObracanie()
        {
            if (checkBox1.Checked)
            {
                fi += (double)numericUpDown1.Value;
                if (fi >= 360)
                    fi -= 360;
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            autoObracanie();
            mojPanel1.Invalidate();
        }
    }

    public class MojPanel : Panel
    {
        public MojPanel()
        {
            DoubleBuffered = true;
        }
    }
}
